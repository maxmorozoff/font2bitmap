const SIZE = [11,16]
const LEVEL = 100;

const contexts = {}

const container = document.querySelector('#canvas')

function readFile(file) {
    return new Promise((resolve, reject) => {
        let fr = new FileReader();
        fr.onload = x=> resolve(fr.result);
        fr.readAsText(file);
})}
async function read(input) {
    const str = await readFile(input.files[0]);
    document.querySelector('#canvas').innerHTML=""
    load(str)
}

const addCanvas = (width,height) =>{
    const canvas = document.createElement('canvas')
    const wrapper = document.createElement('span')
    const ctx = canvas.getContext('2d');

    canvas.width = width
    canvas.height = height
    wrapper.appendChild(canvas)
    container.appendChild(wrapper)
    console.log({canvas})
    
    let op;
    canvas.addEventListener('pointerdown', function(e){
        // if (!e.pressure) return
        e.preventDefault()
        console.log(e)
        const x = Math.floor(e.offsetX * canvas.width / canvas.offsetWidth)
        const y = Math.floor(e.offsetY * canvas.height / canvas.offsetHeight)
        op = paint(ctx,x,y)
    })
    canvas.addEventListener('pointermove', function(e){
        if (!e.buttons) return
        e.preventDefault()
        console.log(op,e)
        const x = Math.floor(e.offsetX * canvas.width / canvas.offsetWidth)
        const y = Math.floor(e.offsetY * canvas.height / canvas.offsetHeight)
        paint(ctx,x,y,op)
    })
    return canvas
}

function toBitmap(ctx, size = SIZE) {
    if (!ctx || size?.length < 2) return

    const data = ctx.getImageData(0, 0, ...SIZE)
    const res = Array(size[0] * size[1]).fill(0)
    console.log('data',data.data)

    for (const i in data.data) res[(i-i%4)/4] = data.data[i] > LEVEL ? 1 : 0
    for (const i in res) for (let j = 0; j<4; j++) data.data[i*4+j] = res[i] * 255

    console.log('data',data.data)
    ctx.putImageData(data,0,0)
    
    return res
    // return genString(res)
    // return res.map(e=>e.toString(16)).join(', ')
}

function genString(arr) {
    const res = []
    let hex = 0
    // for (const i in arr) {
    //     if (!(i%8) && i>0) {
    //         console.log(hex)

    //         res.push(hex)
    //         hex = 0
    //     }
    //     // console.log(arr[i] << i%8, i, i%8, arr[i],hex)
    //     // img.data[(i)*4+(7*4*(i-i%11))+j*11*4+k] = pix

    //     // hex |= arr[i] << i%8
    //     hex += arr[i] << (i)%8
    // }

    for (let y=0;y<SIZE[1]/8;y++){
        for (let x=0;x<SIZE[0];x++){
            for (let b=0;b<SIZE[0];b++){
                hex += arr[x+11*8*y+b*11] << b               
            }
            res.push(hex)
            hex=0
        }
    }
    // console.log('data',res,arr)
    // res.push(hex)


    return res.map(e=>"0x"+("00"+e.toString(16)).slice(-2)).join(', ')
}

function print(canvas, text="") {
    if (!canvas) return

    const ctx = canvas.getContext('2d');
    ctx.textAlign = "center"
    // ctx.textBaseline = "middle"
    ctx.imageSmoothingEnabled = false;
    ctx.font = "19px 'PT Mono', monospace";
    // ctx.font = "22.73px 'Share Tech Mono'";
    // ctx.font = "27.73px 'VT323'";
    // ctx.font = "22px 'Minecraft'";
    
    // ctx.font = "400 22.73px 'Fira Mono'";
    // ctx.font = "60px 'IBM Plex Mono', monospace";
    ctx.fillStyle = 'white'
    ctx.fillText(text, canvas.width/2, canvas.height-1);

    canvas.parentNode.dataset.char = text
    
    contexts[text] = ctx

    console.log(toBitmap(ctx))
    console.log(ctx)
    console.log(ctx.getImageData(0, 0, ...SIZE))
}
function invertPixel(ctx,x,y,op=Array(4)) {
    const p = ctx.getImageData(x, y, 1, 1)
    p.data[0]=op[0]??255-p.data[0]
    p.data[1]=op[1]??255-p.data[1]
    p.data[2]=op[2]??255-p.data[2]
    p.data[3]=op[3]??255-p.data[3]
    // console.log(x,y, ...p.data, ctx.getImageData(x, y, 1, 1).data,ctx)
    return [p,x,y]
}
function paint(ctx,x,y,op) {
    const p = invertPixel(ctx,x,y,op)
    ctx.putImageData(...p)
    return p[0].data
}

// canvas.addEventListener('mousemove', function(event) {
//     const x = event.layerX;
//     const y = event.layerY;
//     zoom(smoothedZoomCtx, x, y);
//     zoom(pixelatedZoomCtx, x, y);
//   });

// print(addCanvas(...SIZE),"A")
// print(addCanvas(...SIZE),"B")
// print(addCanvas(...SIZE),"C")
// print(addCanvas(...SIZE),"1")
// print(addCanvas(...SIZE),"2")

// const REGEX = /[A-Za-z0-9=\-.,]/
// const REGEX = /[0-9]/
// const REGEX = /0/
const REGEX = /.|\s/
const chars = Array(256).fill(0).reduce((a,_,c)=>a+=String.fromCharCode(c).match(REGEX)||"","")

// "0|1|2|3|4|5|6|7|8|9| |!|\"|#|$|%|&|'|(|)|*|+|,|-|.|/|:|;|<|=|>|?|@"
// const myFont = new FontFace('PT Mono', 'url(https://fonts.googleapis.com/css2?family=PT+Mono&display=swap)');

// myFont.load().then((font) => {
//   document.fonts.add(font);

//   console.log('Font loaded');
// });


Array.from(chars).slice(32,122).forEach(c=>print(addCanvas(...SIZE),c))
// Array.from(chars).forEach(c=>print(addCanvas(...SIZE),c))
// Array.from(" !\"#$%&'()*+,-./0123456789:;<=>?@").forEach(c=>print(addCanvas(...SIZE),c))

console.log(chars,"=".charCodeAt(0))

window.addEventListener("keyup", e=>{
    console.log(e)
    if (e.code != "KeyS") return
    if (e.shiftKey || e.altKey) {
        e.preventDefault()
        save()
    }
})

function download(filename, text) {
    const element = document.createElement('a');
    const uriText = encodeURIComponent(text)
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + uriText);
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
    return uriText
}
function save() {
    let str = 'const uint8_t ssd1306xled_font11x16 [] PROGMEM = { \n'
    let arr = []
    for (const char in contexts) {
        const ctx = contexts[char]
        arr[char.charCodeAt(0)]=(`    ${genString(toBitmap(ctx))}, // char ${char} ${char.charCodeAt(0)}\n`)
    }
    str += arr.join('')+'};\n'
    // load(str)
    download(`font-${Date.now()}.h`, str)
}

function load(str) {
    console.log(str)
    const matches = str.matchAll(/(?<=char\s).|(0x[0-9A-Fa-f]{1,4})/gm);
    
    let data = [], obj = {}
    for (const match of matches) {
        // console.log(match);
        if (!match[1]) {
            obj[match[0]] = data
            data = []
            continue
        }
        data.push(match[0])
    }
    console.log(obj);
    hexToCanvas(obj['0'])

    for (const char in obj) {
        contexts[char] = printData(addCanvas(...SIZE),hexToCanvas(obj[char]))
        contexts[char].canvas.parentNode.dataset.char = char
    }
}

function printData(canvas, data) {
    if (!canvas) return

    const ctx = canvas.getContext('2d');
    ctx.putImageData(data,0,0)
    return ctx
}

function hexToCanvas(hexArr) {
    console.log({hexArr})

    const img = new ImageData(...SIZE)
    let count = 0
    for (const i in hexArr) {
        const hex = parseInt(hexArr[i].slice(2),16)
        console.log({hex},hexArr[i],hex.toString(2))
        for (let j=0;j<8;j++){
            // for (let j=8;j>=0;j--){
            // for (let j=7;j>=0;j--){
            const pix = (hex & (1<<(j))) ? 255 : 0
            console.log((hex & (1<<j)),pix)
            for (let k=0;k<4;k++){
                count++
                // img.data[i*8*4+j*4+k] = pix
                // img.data[i*4+(11*4*8*(i%2))+j*11*4+k] = pix
                // img.data[i*4+(11*4*8*(i%2))+j*11*4+k] = pix
                // img.data[(i-i%2)*4+(11*4*8*(i%2))+j*11*4+k] = pix
                img.data[(i)*4+(7*4*(i-i%11))+j*11*4+k] = pix
            }
        }
    }
    console.log(img.data, count)
    return img
}

// save()

// load(`const uint8_t ssd1306xled_font11x16 [] PROGMEM = { 

//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // char  
//     0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x19, 0x18, 0x00, 0x00, 0x00, 0x00,  // char !
//     0x00, 0x00, 0x1C, 0xFC, 0x1C, 0x00, 0x00, 0x1C, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // char "
//     0x30, 0x30, 0xFF, 0xFF, 0x30, 0x30, 0xFF, 0xFF, 0x30, 0x30, 0x00, 0x03, 0x03, 0x3F, 0x3F, 0x03, 0x03, 0x3F, 0x3F, 0x03, 0x03, 0x00,  // char #
//     0x00, 0x38, 0x7C, 0x4C, 0xCF, 0xCF, 0xCC, 0x9C, 0x9C, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0C, 0x7C, 0x7C, 0x0C, 0x0F, 0x07, 0x00, 0x00,  // char $
//     0x00, 0x1C, 0xA2, 0xA2, 0xE2, 0xDC, 0x40, 0x60, 0x20, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00,  // char %
//     0x00, 0x00, 0xB0, 0xF8, 0xCC, 0x8C, 0x0C, 0x0C, 0x8C, 0x80, 0x00, 0x00, 0x0F, 0x0F, 0x19, 0x18, 0x19, 0x1B, 0x0F, 0x1F, 0x19, 0x00,  // char &
//     0x00, 0x00, 0x00, 0x00, 0x1C, 0xFC, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // char '
//     0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0x1E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x78, 0x60, 0x00, 0x00,  // char (
//     0x00, 0x00, 0x06, 0x1E, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // char )
//     0x00, 0x00, 0x18, 0x98, 0xF0, 0xFE, 0xFE, 0xF0, 0x98, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,  // char *
//     0x80, 0x80, 0x80, 0x80, 0xF8, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x00, 0x01, 0x01, 0x01, 0x01, 0x1F, 0x1F, 0x01, 0x01, 0x01, 0x01, 0x00,  // char +
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00,  // char ,
//     0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // char -
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00,  // char .
//     0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xFC, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x60, 0x7C, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // char /
//     0x00, 0xF0, 0xFC, 0x0E, 0x06, 0x06, 0x0E, 0xFC, 0xF0, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1C, 0x18, 0x18, 0x1C, 0x0F, 0x03, 0x00, 0x00,  // char 0
//     0x00, 0x0C, 0x0C, 0x0C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x18, 0x18, 0x18, 0x00, 0x00,  // char 1
//     0x00, 0x18, 0x1C, 0x0E, 0x06, 0x86, 0xCE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x18, 0x1C, 0x1E, 0x1B, 0x19, 0x18, 0x18, 0x18, 0x00, 0x00,  // char 2
//     0x00, 0x0C, 0x0C, 0xC6, 0xC6, 0xC6, 0xE6, 0xFC, 0x38, 0x00, 0x00, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x19, 0x0F, 0x07, 0x00, 0x00,  // char 3
//     0x00, 0x80, 0xC0, 0x70, 0x38, 0x0E, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x1B, 0x1B, 0x1F, 0x1F, 0x1B, 0x00, 0x00,  // char 4
//     0x00, 0x00, 0xFE, 0xFE, 0x66, 0x66, 0xE6, 0xC6, 0x80, 0x00, 0x00, 0x00, 0x0C, 0x1C, 0x18, 0x18, 0x18, 0x1C, 0x0F, 0x07, 0x00, 0x00,  // char 5
//     0x00, 0xE0, 0xF8, 0xDC, 0x6C, 0x66, 0xE6, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1C, 0x18, 0x18, 0x1C, 0x0F, 0x07, 0x00, 0x00,  // char 6
//     0x00, 0x0E, 0x0E, 0x06, 0x06, 0x86, 0xF6, 0xFE, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00,  // char 7
//     0x00, 0x38, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0xFC, 0x38, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x18, 0x18, 0x18, 0x18, 0x0F, 0x07, 0x00, 0x00,  // char 8
//     0x00, 0x78, 0xFC, 0xCE, 0x86, 0x86, 0xCE, 0xFC, 0xF0, 0x00, 0x00, 0x00, 0x18, 0x18, 0x19, 0x19, 0x0D, 0x0E, 0x07, 0x01, 0x00, 0x00,  // char 9
//     0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00,  // char :
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x38, 0x0C, 0x04, 0x00, 0x00, 0x00,  // char ;
//     0x80, 0xC0, 0xC0, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x00, 0x00, 0x01, 0x01, 0x03, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x00,  // char <
//     0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,  // char =
//     0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0xC0, 0xC0, 0x80, 0x80, 0x18, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x03, 0x01, 0x01, 0x00, 0x00,  // char >
//     0x00, 0x00, 0x38, 0x3C, 0x8C, 0x8C, 0xCC, 0xFC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,  // char ?
//     0x00, 0x00, 0xF8, 0x04, 0xC2, 0x22, 0x22, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x21, 0x22, 0x22, 0x13, 0x00, 0x00, 0x00,  // char @  
// };`)